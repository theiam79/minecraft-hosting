# base/bluemap-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bluemap-web # Will be prefixed
  labels:
    app: bluemap-web # Will be prefixed
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bluemap-web # Will be prefixed
  template:
    metadata:
      labels:
        app: bluemap-web # Will be prefixed
      annotations:
        reloader.stakater.com/auto: "true" # If you use stakater reloader for configmap changes
    spec:
      initContainers:
        - name: copy-configmap
          image: alpine/git # Using alpine/git as an example if configs were in git, or just alpine
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'mkdir -p /dest/maps && cp -Lr /cfg-core/* /dest/ && cp -Lr /cfg-maps/* /dest/maps/']
          volumeMounts:
            - name: bluemap-core-cm # Renamed for clarity
              mountPath: /cfg-core
            - name: bluemap-map-cm  # Renamed for clarity
              mountPath: /cfg-maps
            - name: config-target # Renamed for clarity
              mountPath: /dest
        - name: wait-for-minecraft-worlds # Renamed for clarity
          image: alpine/git # Using alpine/git as it includes shell tools like find, ls, wc
          imagePullPolicy: IfNotPresent
          command:
            - 'sh'
            - '-c'
            - |
              set -e # Exit immediately if a command exits with a non-zero status.
              
              MINECRAFT_WORLDS_DIR="/mcworld" # Base path where Minecraft world data is mounted
              
              echo "Waiting for at least one level.dat file to appear in $MINECRAFT_WORLDS_DIR or its subdirectories..."
              
              while true; do
                # Find any 'level.dat' file within the mounted Minecraft worlds directory.
                # The -L option for find follows symbolic links.
                # We are checking if find returns any path (i.e., at least one level.dat is found).
                # The 'find ... -print -quit' combination makes find exit after the first match, which is efficient.
                FOUND_LEVEL_DAT=$(find -L "$MINECRAFT_WORLDS_DIR" -type f -name "level.dat" -print -quit 2>/dev/null)
                
                if [ -n "$FOUND_LEVEL_DAT" ]; then
                  echo "Found level.dat at: $FOUND_LEVEL_DAT. Assuming Minecraft server has started primary world generation."
                  break # Exit the loop
                else
                  echo "No level.dat found yet in $MINECRAFT_WORLDS_DIR. Sleeping for 20 seconds..."
                  sleep 20
                fi
              done
              
              echo "Minecraft world data detected. Bluemap can proceed."
          volumeMounts:
            - name: minecraft-server-world # Mount the Minecraft world data PVC
              mountPath: /mcworld          # Mount path for Minecraft worlds inside this init container
              readOnly: true
            - name: config-target # Mount the emptyDir volume containing the copied ConfigMap data
              mountPath: /bluemap-configs  # Mount path for Bluemap configs inside this init container
              readOnly: true
      containers:
      - name: bluemap-container # Renamed for clarity
        image: ghcr.io/bluemap-minecraft/bluemap:v5.7 # Default, can be patched
        args: ["-r", "-u", "-w"] # Render, Update, Webserver
        ports:
        - containerPort: 8100
          name: web
        volumeMounts:
        - name: config-target # Mount the prepared config from initContainer
          mountPath: /app/config
        - name: minecraft-server-world # This name is referenced in volumes
          mountPath: /app/world
          subPath: world
          readOnly: true
        - name: bluemap-app-data # This name is referenced in volumes
          mountPath: /app/data
        - name: bluemap-app-web # This name is referenced in volumes
          mountPath: /app/web
        resources:
          requests:
            memory: 512Mi
            cpu: 200m
          limits:
            memory: 2Gi
            cpu: 1000m
      volumes:
      - name: bluemap-core-cm
        configMap:
          name: bluemap-core-config # Will be prefixed, must match CM name
      - name: bluemap-map-cm
        configMap:
          name: bluemap-map-config # Will be prefixed, must match CM name
      - name: minecraft-server-world # Referenced by bluemap container
        persistentVolumeClaim:
          claimName: minecraft-data-pvc # IMPORTANT: This needs to point to the correct (prefixed) Minecraft data PVC. Will be patched in overlay.
      - name: bluemap-app-data # Referenced by bluemap container
        persistentVolumeClaim:
          claimName: bluemap-data-pvc # Will be prefixed
      - name: bluemap-app-web # Referenced by bluemap container
        persistentVolumeClaim:
          claimName: bluemap-web-pvc # Will be prefixed
      - name: config-target # Used by initContainer and bluemap container
        emptyDir: {}
